<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="`0,XPQ6kDwnIppZ(Mi@N" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="U#GN*Yv*xvv~iGy;}9@%" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class N2x5{&#13;" line1="  data:number[][][]&#13;" line2="  constructor(){&#13;" line3="    this.data=[&#13;" line4="    [[1,1,1,1,1],[1,1,1,1,1]], //0&#13;" line5="    [[0,1,0,0,0],[1,1,1,1,1]], //1&#13;" line6="    [[1,0,1,1,1],[1,1,1,0,1]], //2&#13;" line7="    [[1,0,1,0,1],[1,1,1,1,1]], //3&#13;" line8="    [[1,1,1,0,0],[0,0,1,1,1]], //4&#13;" line9="    [[1,1,1,0,1],[1,0,1,1,1]], //5&#13;" line10="    [[1,1,1,1,1],[1,0,1,1,1]], //6&#13;" line11="    [[1,0,0,0,0],[1,1,1,1,1]], //7&#13;" line12="    [[1,0,1,0,1],[1,0,1,0,1]], //8&#13;" line13="    [[1,1,1,0,1],[1,1,1,1,1]]] //9&#13;" line14="  }&#13;" line15="}" numlines="16"></mutation><next><block type="typescript_statement" id="/l;)XDL4C^/Am^;ELumY" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace TwoDigitNumbers{&#13;" line1="    let n:N2x5&#13;" line2="    //% blockId=&quot;TwoDigitNumbers_show $value&quot;&#13;" line3="    //% block=&quot;show $value&quot;&#13;" line4="    //% value.min=0 value.max= 99&#13;" line5="    export function show(value:number){&#13;" line6="        if (value &lt; 0) {&#13;" line7="            basic.showLeds(`&#13;" line8="            . . . . .&#13;" line9="            . . . . .&#13;" line10="            # . . . #&#13;" line11="            . # . # .&#13;" line12="            . . # . .`)&#13;" line13="            return&#13;" line14="        }&#13;" line15="        if (value &gt; 99) {&#13;" line16="            basic.showLeds(`&#13;" line17="            . . # . .&#13;" line18="            . # . # .&#13;" line19="            # . . . #&#13;" line20="            . . . . .&#13;" line21="            . . . . .`)&#13;" line22="            return&#13;" line23="        }&#13;" line24="        TwoDigitNumbers.getImage(value).plotFrame(0)&#13;" line25="    }&#13;" line26="    export function getImage(value:number):Image{&#13;" line27="        let img=images.createImage('.....\r\n.....\r\n.....\r\n.....\r\n.....');&#13;" line28="        let t=Math.floor(value/10)&#13;" line29="        let f=value-t*10&#13;" line30="        if(t&gt;0)copyDigit(0,t,img)&#13;" line31="        copyDigit(3,f,img)&#13;" line32="        return img&#13;" line33="    }&#13;" line34="    function copyDigit(offset:number,digit:number,img:Image){&#13;" line35="        if(n==null)n=new N2x5()&#13;" line36="        for(let column=0;column&lt;2;column++){&#13;" line37="            for(let row=0;row&lt;5;row++){&#13;" line38="                img.setPixel(offset+column, row, n.data[digit][column][row]==1)&#13;" line39="            }&#13;" line40="        }&#13;" line41="    }&#13;" line42="}" numlines="43"></mutation></block></next></block></statement></block></xml>